version: "3"

networks:
  backend:
    driver: bridge

services:

#  worker:
#    build:
#      context: ./worker
#      args:
#        - http_proxy
#        - https_proxy
#        - no_proxy
#    env_file:
#      - ./.env
#    volumes:
#      - ~/.ssh:/root/.ssh
#      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
#    tty: true
#    networks:
#      - backend

  php:
    build:
      context: ./php
    env_file:
      - ./.env
    volumes:
      - /Users/xtp/workspace:/usr/src
#    expose:
#      - "9000"
    ports:
      - "7700:7700"
      - "8088:8088"
    networks:
      - backend
    tty: true
    container_name: php

  nginx:
    build:
      context: ./nginx
      args:
        - PHP_UPSTREAM_CONTAINER=${NGINX_PHP_UPSTREAM_CONTAINER}
        - PHP_UPSTREAM_PORT=${NGINX_PHP_UPSTREAM_PORT}
        - http_proxy
        - https_proxy
        - no_proxy
    env_file:
      - ./.env
    volumes:
      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
      - ${NGINX_HOST_LOG_PATH}:/var/log/nginx
      - ${NGINX_SITES_PATH}:/etc/nginx/sites-available
      - ${NGINX_SSL_PATH}:/etc/nginx/ssl
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - php-fpm
    environment:
      - TZ=${TIMEZONE}
    networks:
      - backend
    links:
      - php-fpm
    ports:
      - "${NGINX_HOST_HTTP_PORT}:80"
      - "${NGINX_HOST_HTTPS_PORT}:443"
    container_name: nginx

  php-fpm:
    build:
      context: ./php-fpm
    env_file:
      - ./.env
    volumes:
      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
      - ./php-fpm/php7.4.ini:/usr/local/etc/php/php.ini
    expose:
      - "9000"
    networks:
      - backend

  mysql:
    build:
      context: ./mysql
      args:
        - MYSQL_VERSION=${MYSQL_VERSION}
    env_file:
      - ./.env
    networks:
      - backend
    environment:
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - TZ=${TIMEZONE}
    ports:
      - "${MYSQL_PORT}:3306"
    container_name: mysql

  redis:
    build: ./redis
    volumes:
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "${REDIS_PORT}:6379"
    networks:
      - backend
    container_name: redis

  memcached:
    image: memcached:latest
    networks:
      - backend
    ports:
      - 11211
    container_name: memcached

  go:
    image: golang:latest
    links:
      - php
    volumes:
      - /Users/xtp/go:/go
    networks:
      - backend
    ports:
      - "8000:8000"
    container_name: go
    tty: true


#  consul:
#    image: consul:latest
#    expose:
#      - "8500"
#    networks:
#      - backend
#    volumes:
#      - ./consul/data:/consul/data
#      - ./consul/config:/consul/config
#    ports:
#      - "8300:8300"
#      - "8301:8301"
#      - "8301:8301/udp"
#      - "8302:8302"
#      - "8302:8302/udp"
#      - "8400:8400"
#      - "53:53/udp"
#      - "8500:8500"
#    command: agent -dev -client=0.0.0.0 -ui

#  elasticsearch:
#    build: ./elasticsearch
#    environment:
#      - "cluster.name=elasticsearch" #设置集群名称为elasticsearch
#      - "discovery.type=single-node" #以单一节点模式启动
#      - "ES_JAVA_OPTS=-Xms512m -Xmx512m" #设置使用jvm内存大小
#    volumes:
##      - ./elasticsearch/plugins:/usr/share/elasticsearch/plugins #插件文件挂载
#      - ./elasticsearch/data:/usr/share/elasticsearch/data #数据文件挂载
##      - ./elas/es.yml:/usr/share/elasticsearch/config/elasticsearch.yml #启动文件挂载
#    ulimits:
#      memlock:
#        soft: -1
#        hard: -1
#    expose:
#      - 9200
#    ports:
#      - 9200:9200
#      - 9300:9300
#    networks:
#      - backend

#  kibana:
#    image: kibana:7.7.0
#    depends_on:
#      - elasticsearch #kibana在elasticsearch启动之后再启动
#    environment:
#      - "elasticsearch.hosts=elasticsearch:9200" #设置访问elasticsearch的地址
#    ports:
#      - 5601:5601
#    networks:
#      - backend
#
#  zipkin:
#    image: openzipkin/zipkin
#    expose:
#      - 9411
#    ports:
#      - 9411:9411
#    networks:
#      - backend
#
#  # https://prometheus.io/docs/prometheus/latest/installation/
#  prometheus:
#    image: prom/prometheus
#    ports:
#      - "9090:9090"
#    volumes:
#      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
#    networks:
#      - backend
#  # https://grafana.com/docs/installation/docker/
#  grafana:
#    image: grafana/grafana
#    ports:
#      - "3000:3000"
#    networks:
#      - backend